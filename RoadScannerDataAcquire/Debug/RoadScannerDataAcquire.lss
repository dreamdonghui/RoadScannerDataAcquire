
RoadScannerDataAcquire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c94  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  2000000c  00000ca0  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000090  00000d24  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015b53  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000247a  00000000  00000000  00035be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a14e  00000000  00000000  0003805a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000938  00000000  00000000  000421a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e18  00000000  00000000  00042ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f263  00000000  00000000  000438f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010a73  00000000  00000000  00062b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009ba07  00000000  00000000  000735ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016e4  00000000  00000000  0010efd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	90 20 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     . . -...)...)...
	...
  2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
  3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  6c:	29 01 00 00 29 01 00 00 89 0a 00 00 29 01 00 00     )...).......)...
  7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	2000000c 	.word	0x2000000c
  dc:	00000000 	.word	0x00000000
  e0:	00000c94 	.word	0x00000c94

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	20000010 	.word	0x20000010
 110:	00000c94 	.word	0x00000c94
 114:	00000c94 	.word	0x00000c94
 118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 11c:	b510      	push	{r4, lr}
	system_init();
 11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
 120:	4798      	blx	r3
}
 122:	bd10      	pop	{r4, pc}
 124:	00000265 	.word	0x00000265

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
 12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 12e:	4a17      	ldr	r2, [pc, #92]	; (18c <Reset_Handler+0x60>)
 130:	4b17      	ldr	r3, [pc, #92]	; (190 <Reset_Handler+0x64>)
 132:	429a      	cmp	r2, r3
 134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 136:	001a      	movs	r2, r3
 138:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x68>)
 13a:	429a      	cmp	r2, r3
 13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
 13e:	4a16      	ldr	r2, [pc, #88]	; (198 <Reset_Handler+0x6c>)
 140:	3303      	adds	r3, #3
 142:	1a9b      	subs	r3, r3, r2
 144:	089b      	lsrs	r3, r3, #2
 146:	3301      	adds	r3, #1
 148:	009b      	lsls	r3, r3, #2
 14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 14c:	4810      	ldr	r0, [pc, #64]	; (190 <Reset_Handler+0x64>)
 14e:	490f      	ldr	r1, [pc, #60]	; (18c <Reset_Handler+0x60>)
 150:	588c      	ldr	r4, [r1, r2]
 152:	5084      	str	r4, [r0, r2]
 154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 156:	429a      	cmp	r2, r3
 158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 15a:	4a10      	ldr	r2, [pc, #64]	; (19c <Reset_Handler+0x70>)
 15c:	4b10      	ldr	r3, [pc, #64]	; (1a0 <Reset_Handler+0x74>)
 15e:	429a      	cmp	r2, r3
 160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
 162:	43d3      	mvns	r3, r2
 164:	490e      	ldr	r1, [pc, #56]	; (1a0 <Reset_Handler+0x74>)
 166:	185b      	adds	r3, r3, r1
 168:	2103      	movs	r1, #3
 16a:	438b      	bics	r3, r1
 16c:	3304      	adds	r3, #4
 16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 170:	2100      	movs	r1, #0
 172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 174:	4293      	cmp	r3, r2
 176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <Reset_Handler+0x78>)
 17a:	21ff      	movs	r1, #255	; 0xff
 17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x7c>)
 17e:	438b      	bics	r3, r1
 180:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 182:	4b0a      	ldr	r3, [pc, #40]	; (1ac <Reset_Handler+0x80>)
 184:	4798      	blx	r3
        main();
 186:	4b0a      	ldr	r3, [pc, #40]	; (1b0 <Reset_Handler+0x84>)
 188:	4798      	blx	r3
 18a:	e7fe      	b.n	18a <Reset_Handler+0x5e>
 18c:	00000c94 	.word	0x00000c94
 190:	20000000 	.word	0x20000000
 194:	2000000c 	.word	0x2000000c
 198:	20000004 	.word	0x20000004
 19c:	2000000c 	.word	0x2000000c
 1a0:	20000090 	.word	0x20000090
 1a4:	e000ed00 	.word	0xe000ed00
 1a8:	00000000 	.word	0x00000000
 1ac:	00000b81 	.word	0x00000b81
 1b0:	00000b5d 	.word	0x00000b5d

000001b4 <USART_On_USBPort_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <USART_On_USBPort_CLOCK_init+0x1c>)
 1b6:	2140      	movs	r1, #64	; 0x40
 1b8:	22dc      	movs	r2, #220	; 0xdc
 1ba:	5099      	str	r1, [r3, r2]
 1bc:	3103      	adds	r1, #3
 1be:	3a14      	subs	r2, #20
 1c0:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
 1c2:	4a04      	ldr	r2, [pc, #16]	; (1d4 <USART_On_USBPort_CLOCK_init+0x20>)
 1c4:	69d3      	ldr	r3, [r2, #28]
 1c6:	3923      	subs	r1, #35	; 0x23
 1c8:	430b      	orrs	r3, r1
 1ca:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
 1cc:	4770      	bx	lr
 1ce:	46c0      	nop			; (mov r8, r8)
 1d0:	40001c00 	.word	0x40001c00
 1d4:	40000800 	.word	0x40000800

000001d8 <USART_On_USBPort_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_On_USBPort_PORT_init()
{
 1d8:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1da:	2382      	movs	r3, #130	; 0x82
 1dc:	05db      	lsls	r3, r3, #23
 1de:	22ca      	movs	r2, #202	; 0xca
 1e0:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1e2:	2501      	movs	r5, #1
 1e4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1e6:	2401      	movs	r4, #1
 1e8:	4321      	orrs	r1, r4
 1ea:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1ec:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1ee:	20b5      	movs	r0, #181	; 0xb5
 1f0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1f2:	3abb      	subs	r2, #187	; 0xbb
 1f4:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
 1f6:	3a0c      	subs	r2, #12
 1f8:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1fc:	21cb      	movs	r1, #203	; 0xcb
 1fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 200:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 202:	4322      	orrs	r2, r4
 204:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 206:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 208:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 20a:	39bc      	subs	r1, #188	; 0xbc
 20c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 20e:	3121      	adds	r1, #33	; 0x21
 210:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 212:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
 214:	bd30      	pop	{r4, r5, pc}
	...

00000218 <USART_On_USBPort_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_On_USBPort_init(void)
{
 218:	b510      	push	{r4, lr}
 21a:	b082      	sub	sp, #8
	USART_On_USBPort_CLOCK_init();
 21c:	4b06      	ldr	r3, [pc, #24]	; (238 <USART_On_USBPort_init+0x20>)
 21e:	4798      	blx	r3
	usart_async_init(&USART_On_USBPort, SERCOM4, USART_On_USBPort_buffer, USART_ON_USBPORT_BUFFER_SIZE, (void *)NULL);
 220:	2300      	movs	r3, #0
 222:	9300      	str	r3, [sp, #0]
 224:	3310      	adds	r3, #16
 226:	4a05      	ldr	r2, [pc, #20]	; (23c <USART_On_USBPort_init+0x24>)
 228:	4905      	ldr	r1, [pc, #20]	; (240 <USART_On_USBPort_init+0x28>)
 22a:	4806      	ldr	r0, [pc, #24]	; (244 <USART_On_USBPort_init+0x2c>)
 22c:	4c06      	ldr	r4, [pc, #24]	; (248 <USART_On_USBPort_init+0x30>)
 22e:	47a0      	blx	r4
	USART_On_USBPort_PORT_init();
 230:	4b06      	ldr	r3, [pc, #24]	; (24c <USART_On_USBPort_init+0x34>)
 232:	4798      	blx	r3
}
 234:	b002      	add	sp, #8
 236:	bd10      	pop	{r4, pc}
 238:	000001b5 	.word	0x000001b5
 23c:	20000028 	.word	0x20000028
 240:	42001400 	.word	0x42001400
 244:	20000040 	.word	0x20000040
 248:	00000515 	.word	0x00000515
 24c:	000001d9 	.word	0x000001d9

00000250 <delay_driver_init>:

void delay_driver_init(void)
{
 250:	b510      	push	{r4, lr}
	delay_init(SysTick);
 252:	4802      	ldr	r0, [pc, #8]	; (25c <delay_driver_init+0xc>)
 254:	4b02      	ldr	r3, [pc, #8]	; (260 <delay_driver_init+0x10>)
 256:	4798      	blx	r3
}
 258:	bd10      	pop	{r4, pc}
 25a:	46c0      	nop			; (mov r8, r8)
 25c:	e000e010 	.word	0xe000e010
 260:	000002e9 	.word	0x000002e9

00000264 <system_init>:

void system_init(void)
{
 264:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 266:	4b03      	ldr	r3, [pc, #12]	; (274 <system_init+0x10>)
 268:	4798      	blx	r3
	init_mcu();

	USART_On_USBPort_init();
 26a:	4b03      	ldr	r3, [pc, #12]	; (278 <system_init+0x14>)
 26c:	4798      	blx	r3

	delay_driver_init();
 26e:	4b03      	ldr	r3, [pc, #12]	; (27c <system_init+0x18>)
 270:	4798      	blx	r3
}
 272:	bd10      	pop	{r4, pc}
 274:	0000078d 	.word	0x0000078d
 278:	00000219 	.word	0x00000219
 27c:	00000251 	.word	0x00000251

00000280 <tx_cb_USART_On_USBPort>:
static uint8_t example_USART_On_USBPort[12] = "Hello World!";

static void tx_cb_USART_On_USBPort(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
 280:	4770      	bx	lr
	...

00000284 <USART_On_USBPort_example>:

void USART_On_USBPort_example(void)
{
 284:	b510      	push	{r4, lr}
 286:	b082      	sub	sp, #8
	struct io_descriptor *io;

	usart_async_register_callback(&USART_On_USBPort, USART_ASYNC_TXC_CB, tx_cb_USART_On_USBPort);
 288:	4c09      	ldr	r4, [pc, #36]	; (2b0 <USART_On_USBPort_example+0x2c>)
 28a:	4a0a      	ldr	r2, [pc, #40]	; (2b4 <USART_On_USBPort_example+0x30>)
 28c:	2101      	movs	r1, #1
 28e:	0020      	movs	r0, r4
 290:	4b09      	ldr	r3, [pc, #36]	; (2b8 <USART_On_USBPort_example+0x34>)
 292:	4798      	blx	r3
	/*usart_async_register_callback(&USART_On_USBPort, USART_ASYNC_RXC_CB, rx_cb);
	usart_async_register_callback(&USART_On_USBPort, USART_ASYNC_ERROR_CB, err_cb);*/
	usart_async_get_io_descriptor(&USART_On_USBPort, &io);
 294:	a901      	add	r1, sp, #4
 296:	0020      	movs	r0, r4
 298:	4b08      	ldr	r3, [pc, #32]	; (2bc <USART_On_USBPort_example+0x38>)
 29a:	4798      	blx	r3
	usart_async_enable(&USART_On_USBPort);
 29c:	0020      	movs	r0, r4
 29e:	4b08      	ldr	r3, [pc, #32]	; (2c0 <USART_On_USBPort_example+0x3c>)
 2a0:	4798      	blx	r3

	io_write(io, example_USART_On_USBPort, 12);
 2a2:	220c      	movs	r2, #12
 2a4:	4907      	ldr	r1, [pc, #28]	; (2c4 <USART_On_USBPort_example+0x40>)
 2a6:	9801      	ldr	r0, [sp, #4]
 2a8:	4b07      	ldr	r3, [pc, #28]	; (2c8 <USART_On_USBPort_example+0x44>)
 2aa:	4798      	blx	r3
}
 2ac:	b002      	add	sp, #8
 2ae:	bd10      	pop	{r4, pc}
 2b0:	20000040 	.word	0x20000040
 2b4:	00000281 	.word	0x00000281
 2b8:	00000605 	.word	0x00000605
 2bc:	000005d9 	.word	0x000005d9
 2c0:	000005ad 	.word	0x000005ad
 2c4:	20000000 	.word	0x20000000
 2c8:	0000031d 	.word	0x0000031d

000002cc <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 2cc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
 2d0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 2d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 2d4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
 2d8:	4770      	bx	lr

000002da <atomic_leave_critical>:
 2da:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
 2de:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 2e0:	f383 8810 	msr	PRIMASK, r3
}
 2e4:	4770      	bx	lr
	...

000002e8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 2e8:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 2ea:	4b02      	ldr	r3, [pc, #8]	; (2f4 <delay_init+0xc>)
 2ec:	6018      	str	r0, [r3, #0]
 2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <delay_init+0x10>)
 2f0:	4798      	blx	r3
}
 2f2:	bd10      	pop	{r4, pc}
 2f4:	20000038 	.word	0x20000038
 2f8:	00000af5 	.word	0x00000af5

000002fc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 2fc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 2fe:	4b04      	ldr	r3, [pc, #16]	; (310 <delay_ms+0x14>)
 300:	681c      	ldr	r4, [r3, #0]
 302:	4b04      	ldr	r3, [pc, #16]	; (314 <delay_ms+0x18>)
 304:	4798      	blx	r3
 306:	0001      	movs	r1, r0
 308:	0020      	movs	r0, r4
 30a:	4b03      	ldr	r3, [pc, #12]	; (318 <delay_ms+0x1c>)
 30c:	4798      	blx	r3
}
 30e:	bd10      	pop	{r4, pc}
 310:	20000038 	.word	0x20000038
 314:	00000785 	.word	0x00000785
 318:	00000b09 	.word	0x00000b09

0000031c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
 31c:	b570      	push	{r4, r5, r6, lr}
 31e:	0006      	movs	r6, r0
 320:	000c      	movs	r4, r1
 322:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 324:	2800      	cmp	r0, #0
 326:	d00d      	beq.n	344 <io_write+0x28>
 328:	0008      	movs	r0, r1
 32a:	1e43      	subs	r3, r0, #1
 32c:	4198      	sbcs	r0, r3
 32e:	b2c0      	uxtb	r0, r0
 330:	2234      	movs	r2, #52	; 0x34
 332:	4905      	ldr	r1, [pc, #20]	; (348 <io_write+0x2c>)
 334:	4b05      	ldr	r3, [pc, #20]	; (34c <io_write+0x30>)
 336:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
 338:	6833      	ldr	r3, [r6, #0]
 33a:	002a      	movs	r2, r5
 33c:	0021      	movs	r1, r4
 33e:	0030      	movs	r0, r6
 340:	4798      	blx	r3
}
 342:	bd70      	pop	{r4, r5, r6, pc}
 344:	2000      	movs	r0, #0
 346:	e7f3      	b.n	330 <io_write+0x14>
 348:	00000bc8 	.word	0x00000bc8
 34c:	0000067d 	.word	0x0000067d

00000350 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
 350:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 352:	3808      	subs	r0, #8

	descr->stat = 0;
 354:	2300      	movs	r3, #0
 356:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
 358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 35a:	2b00      	cmp	r3, #0
 35c:	d000      	beq.n	360 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
 35e:	4798      	blx	r3
	}
}
 360:	bd10      	pop	{r4, pc}

00000362 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
 362:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 364:	3808      	subs	r0, #8

	descr->stat = 0;
 366:	2300      	movs	r3, #0
 368:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
 36a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 36c:	2b00      	cmp	r3, #0
 36e:	d000      	beq.n	372 <usart_error+0x10>
		descr->usart_cb.error(descr);
 370:	4798      	blx	r3
	}
}
 372:	bd10      	pop	{r4, pc}

00000374 <usart_fill_rx_buffer>:
{
 374:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 376:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
 378:	302c      	adds	r0, #44	; 0x2c
 37a:	4b04      	ldr	r3, [pc, #16]	; (38c <usart_fill_rx_buffer+0x18>)
 37c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
 37e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 380:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
 382:	2b00      	cmp	r3, #0
 384:	d001      	beq.n	38a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
 386:	0020      	movs	r0, r4
 388:	4798      	blx	r3
}
 38a:	bd10      	pop	{r4, pc}
 38c:	00000721 	.word	0x00000721

00000390 <usart_async_write>:
{
 390:	b570      	push	{r4, r5, r6, lr}
 392:	0004      	movs	r4, r0
 394:	000e      	movs	r6, r1
 396:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
 398:	2800      	cmp	r0, #0
 39a:	d01d      	beq.n	3d8 <usart_async_write+0x48>
 39c:	2900      	cmp	r1, #0
 39e:	d01d      	beq.n	3dc <usart_async_write+0x4c>
 3a0:	0010      	movs	r0, r2
 3a2:	1e43      	subs	r3, r0, #1
 3a4:	4198      	sbcs	r0, r3
 3a6:	223c      	movs	r2, #60	; 0x3c
 3a8:	32ff      	adds	r2, #255	; 0xff
 3aa:	490f      	ldr	r1, [pc, #60]	; (3e8 <usart_async_write+0x58>)
 3ac:	4b0f      	ldr	r3, [pc, #60]	; (3ec <usart_async_write+0x5c>)
 3ae:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
 3b0:	2344      	movs	r3, #68	; 0x44
 3b2:	5ae2      	ldrh	r2, [r4, r3]
 3b4:	3308      	adds	r3, #8
 3b6:	5ae3      	ldrh	r3, [r4, r3]
 3b8:	429a      	cmp	r2, r3
 3ba:	d111      	bne.n	3e0 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
 3bc:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
 3be:	234c      	movs	r3, #76	; 0x4c
 3c0:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
 3c2:	2200      	movs	r2, #0
 3c4:	3b08      	subs	r3, #8
 3c6:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
 3c8:	3b43      	subs	r3, #67	; 0x43
 3ca:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
 3cc:	0020      	movs	r0, r4
 3ce:	3008      	adds	r0, #8
 3d0:	4b07      	ldr	r3, [pc, #28]	; (3f0 <usart_async_write+0x60>)
 3d2:	4798      	blx	r3
	return (int32_t)length;
 3d4:	0028      	movs	r0, r5
}
 3d6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
 3d8:	2000      	movs	r0, #0
 3da:	e7e4      	b.n	3a6 <usart_async_write+0x16>
 3dc:	2000      	movs	r0, #0
 3de:	e7e2      	b.n	3a6 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
 3e0:	201c      	movs	r0, #28
 3e2:	4240      	negs	r0, r0
 3e4:	e7f7      	b.n	3d6 <usart_async_write+0x46>
 3e6:	46c0      	nop			; (mov r8, r8)
 3e8:	00000bdc 	.word	0x00000bdc
 3ec:	0000067d 	.word	0x0000067d
 3f0:	00000a05 	.word	0x00000a05

000003f4 <usart_process_byte_sent>:
{
 3f4:	b570      	push	{r4, r5, r6, lr}
 3f6:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
 3f8:	0001      	movs	r1, r0
 3fa:	3908      	subs	r1, #8
 3fc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 3fe:	224c      	movs	r2, #76	; 0x4c
 400:	5a8a      	ldrh	r2, [r1, r2]
 402:	429a      	cmp	r2, r3
 404:	d00c      	beq.n	420 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
 406:	000a      	movs	r2, r1
 408:	6c89      	ldr	r1, [r1, #72]	; 0x48
 40a:	1c5d      	adds	r5, r3, #1
 40c:	2044      	movs	r0, #68	; 0x44
 40e:	5215      	strh	r5, [r2, r0]
 410:	5cc9      	ldrb	r1, [r1, r3]
 412:	0020      	movs	r0, r4
 414:	4b04      	ldr	r3, [pc, #16]	; (428 <usart_process_byte_sent+0x34>)
 416:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
 418:	0020      	movs	r0, r4
 41a:	4b04      	ldr	r3, [pc, #16]	; (42c <usart_process_byte_sent+0x38>)
 41c:	4798      	blx	r3
}
 41e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
 420:	4b03      	ldr	r3, [pc, #12]	; (430 <usart_process_byte_sent+0x3c>)
 422:	4798      	blx	r3
}
 424:	e7fb      	b.n	41e <usart_process_byte_sent+0x2a>
 426:	46c0      	nop			; (mov r8, r8)
 428:	000009fd 	.word	0x000009fd
 42c:	00000a05 	.word	0x00000a05
 430:	00000a0d 	.word	0x00000a0d

00000434 <usart_async_read>:
{
 434:	b5f0      	push	{r4, r5, r6, r7, lr}
 436:	46ce      	mov	lr, r9
 438:	4647      	mov	r7, r8
 43a:	b580      	push	{r7, lr}
 43c:	b085      	sub	sp, #20
 43e:	0005      	movs	r5, r0
 440:	000e      	movs	r6, r1
 442:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
 444:	2800      	cmp	r0, #0
 446:	d015      	beq.n	474 <usart_async_read+0x40>
 448:	2900      	cmp	r1, #0
 44a:	d013      	beq.n	474 <usart_async_read+0x40>
 44c:	2a00      	cmp	r2, #0
 44e:	d12a      	bne.n	4a6 <usart_async_read+0x72>
 450:	22ac      	movs	r2, #172	; 0xac
 452:	0052      	lsls	r2, r2, #1
 454:	4929      	ldr	r1, [pc, #164]	; (4fc <usart_async_read+0xc8>)
 456:	2000      	movs	r0, #0
 458:	4b29      	ldr	r3, [pc, #164]	; (500 <usart_async_read+0xcc>)
 45a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 45c:	a803      	add	r0, sp, #12
 45e:	4b29      	ldr	r3, [pc, #164]	; (504 <usart_async_read+0xd0>)
 460:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 462:	0028      	movs	r0, r5
 464:	3034      	adds	r0, #52	; 0x34
 466:	4b28      	ldr	r3, [pc, #160]	; (508 <usart_async_read+0xd4>)
 468:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
 46a:	a803      	add	r0, sp, #12
 46c:	4b27      	ldr	r3, [pc, #156]	; (50c <usart_async_read+0xd8>)
 46e:	4798      	blx	r3
	uint16_t                       was_read = 0;
 470:	2500      	movs	r5, #0
	return (int32_t)was_read;
 472:	e03c      	b.n	4ee <usart_async_read+0xba>
	ASSERT(descr && buf && length);
 474:	22ac      	movs	r2, #172	; 0xac
 476:	0052      	lsls	r2, r2, #1
 478:	4920      	ldr	r1, [pc, #128]	; (4fc <usart_async_read+0xc8>)
 47a:	2000      	movs	r0, #0
 47c:	4b20      	ldr	r3, [pc, #128]	; (500 <usart_async_read+0xcc>)
 47e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 480:	a803      	add	r0, sp, #12
 482:	4b20      	ldr	r3, [pc, #128]	; (504 <usart_async_read+0xd0>)
 484:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 486:	3534      	adds	r5, #52	; 0x34
 488:	0028      	movs	r0, r5
 48a:	9501      	str	r5, [sp, #4]
 48c:	4b1e      	ldr	r3, [pc, #120]	; (508 <usart_async_read+0xd4>)
 48e:	4798      	blx	r3
 490:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
 492:	a803      	add	r0, sp, #12
 494:	4b1d      	ldr	r3, [pc, #116]	; (50c <usart_async_read+0xd8>)
 496:	4798      	blx	r3
	uint16_t                       was_read = 0;
 498:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
 49a:	4643      	mov	r3, r8
 49c:	2b00      	cmp	r3, #0
 49e:	d026      	beq.n	4ee <usart_async_read+0xba>
 4a0:	2f00      	cmp	r7, #0
 4a2:	d116      	bne.n	4d2 <usart_async_read+0x9e>
 4a4:	e023      	b.n	4ee <usart_async_read+0xba>
	ASSERT(descr && buf && length);
 4a6:	22ac      	movs	r2, #172	; 0xac
 4a8:	0052      	lsls	r2, r2, #1
 4aa:	4914      	ldr	r1, [pc, #80]	; (4fc <usart_async_read+0xc8>)
 4ac:	2001      	movs	r0, #1
 4ae:	4b14      	ldr	r3, [pc, #80]	; (500 <usart_async_read+0xcc>)
 4b0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 4b2:	a803      	add	r0, sp, #12
 4b4:	4b13      	ldr	r3, [pc, #76]	; (504 <usart_async_read+0xd0>)
 4b6:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 4b8:	3534      	adds	r5, #52	; 0x34
 4ba:	0028      	movs	r0, r5
 4bc:	9501      	str	r5, [sp, #4]
 4be:	4b12      	ldr	r3, [pc, #72]	; (508 <usart_async_read+0xd4>)
 4c0:	4798      	blx	r3
 4c2:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
 4c4:	a803      	add	r0, sp, #12
 4c6:	4b11      	ldr	r3, [pc, #68]	; (50c <usart_async_read+0xd8>)
 4c8:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
 4ca:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
 4cc:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
 4ce:	2b00      	cmp	r3, #0
 4d0:	d00d      	beq.n	4ee <usart_async_read+0xba>
{
 4d2:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
 4d4:	4b0e      	ldr	r3, [pc, #56]	; (510 <usart_async_read+0xdc>)
 4d6:	4699      	mov	r9, r3
 4d8:	1c65      	adds	r5, r4, #1
 4da:	b2ad      	uxth	r5, r5
 4dc:	1931      	adds	r1, r6, r4
 4de:	9801      	ldr	r0, [sp, #4]
 4e0:	47c8      	blx	r9
 4e2:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
 4e4:	4544      	cmp	r4, r8
 4e6:	d202      	bcs.n	4ee <usart_async_read+0xba>
 4e8:	b2a3      	uxth	r3, r4
 4ea:	429f      	cmp	r7, r3
 4ec:	d8f4      	bhi.n	4d8 <usart_async_read+0xa4>
}
 4ee:	0028      	movs	r0, r5
 4f0:	b005      	add	sp, #20
 4f2:	bc0c      	pop	{r2, r3}
 4f4:	4690      	mov	r8, r2
 4f6:	4699      	mov	r9, r3
 4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 4fa:	46c0      	nop			; (mov r8, r8)
 4fc:	00000bdc 	.word	0x00000bdc
 500:	0000067d 	.word	0x0000067d
 504:	000002cd 	.word	0x000002cd
 508:	00000761 	.word	0x00000761
 50c:	000002db 	.word	0x000002db
 510:	000006d9 	.word	0x000006d9

00000514 <usart_async_init>:
{
 514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 516:	0004      	movs	r4, r0
 518:	000d      	movs	r5, r1
 51a:	0016      	movs	r6, r2
 51c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
 51e:	2800      	cmp	r0, #0
 520:	d026      	beq.n	570 <usart_async_init+0x5c>
 522:	2900      	cmp	r1, #0
 524:	d026      	beq.n	574 <usart_async_init+0x60>
 526:	2a00      	cmp	r2, #0
 528:	d026      	beq.n	578 <usart_async_init+0x64>
 52a:	0018      	movs	r0, r3
 52c:	1e43      	subs	r3, r0, #1
 52e:	4198      	sbcs	r0, r3
 530:	223a      	movs	r2, #58	; 0x3a
 532:	4914      	ldr	r1, [pc, #80]	; (584 <usart_async_init+0x70>)
 534:	4b14      	ldr	r3, [pc, #80]	; (588 <usart_async_init+0x74>)
 536:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
 538:	0020      	movs	r0, r4
 53a:	3034      	adds	r0, #52	; 0x34
 53c:	003a      	movs	r2, r7
 53e:	0031      	movs	r1, r6
 540:	4b12      	ldr	r3, [pc, #72]	; (58c <usart_async_init+0x78>)
 542:	4798      	blx	r3
 544:	2800      	cmp	r0, #0
 546:	d119      	bne.n	57c <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
 548:	0020      	movs	r0, r4
 54a:	3008      	adds	r0, #8
 54c:	0029      	movs	r1, r5
 54e:	4b10      	ldr	r3, [pc, #64]	; (590 <usart_async_init+0x7c>)
 550:	4798      	blx	r3
	if (init_status) {
 552:	2800      	cmp	r0, #0
 554:	d10b      	bne.n	56e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
 556:	4b0f      	ldr	r3, [pc, #60]	; (594 <usart_async_init+0x80>)
 558:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
 55a:	4b0f      	ldr	r3, [pc, #60]	; (598 <usart_async_init+0x84>)
 55c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
 55e:	4b0f      	ldr	r3, [pc, #60]	; (59c <usart_async_init+0x88>)
 560:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
 562:	4b0f      	ldr	r3, [pc, #60]	; (5a0 <usart_async_init+0x8c>)
 564:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
 566:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <usart_async_init+0x90>)
 568:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
 56a:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <usart_async_init+0x94>)
 56c:	6163      	str	r3, [r4, #20]
}
 56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
 570:	2000      	movs	r0, #0
 572:	e7dd      	b.n	530 <usart_async_init+0x1c>
 574:	2000      	movs	r0, #0
 576:	e7db      	b.n	530 <usart_async_init+0x1c>
 578:	2000      	movs	r0, #0
 57a:	e7d9      	b.n	530 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
 57c:	200d      	movs	r0, #13
 57e:	4240      	negs	r0, r0
 580:	e7f5      	b.n	56e <usart_async_init+0x5a>
 582:	46c0      	nop			; (mov r8, r8)
 584:	00000bdc 	.word	0x00000bdc
 588:	0000067d 	.word	0x0000067d
 58c:	00000685 	.word	0x00000685
 590:	00000971 	.word	0x00000971
 594:	00000435 	.word	0x00000435
 598:	00000391 	.word	0x00000391
 59c:	000003f5 	.word	0x000003f5
 5a0:	00000375 	.word	0x00000375
 5a4:	00000351 	.word	0x00000351
 5a8:	00000363 	.word	0x00000363

000005ac <usart_async_enable>:
{
 5ac:	b510      	push	{r4, lr}
 5ae:	0004      	movs	r4, r0
	ASSERT(descr);
 5b0:	1e43      	subs	r3, r0, #1
 5b2:	4198      	sbcs	r0, r3
 5b4:	b2c0      	uxtb	r0, r0
 5b6:	2261      	movs	r2, #97	; 0x61
 5b8:	4904      	ldr	r1, [pc, #16]	; (5cc <usart_async_enable+0x20>)
 5ba:	4b05      	ldr	r3, [pc, #20]	; (5d0 <usart_async_enable+0x24>)
 5bc:	4798      	blx	r3
	_usart_async_enable(&descr->device);
 5be:	0020      	movs	r0, r4
 5c0:	3008      	adds	r0, #8
 5c2:	4b04      	ldr	r3, [pc, #16]	; (5d4 <usart_async_enable+0x28>)
 5c4:	4798      	blx	r3
}
 5c6:	2000      	movs	r0, #0
 5c8:	bd10      	pop	{r4, pc}
 5ca:	46c0      	nop			; (mov r8, r8)
 5cc:	00000bdc 	.word	0x00000bdc
 5d0:	0000067d 	.word	0x0000067d
 5d4:	000009e9 	.word	0x000009e9

000005d8 <usart_async_get_io_descriptor>:
{
 5d8:	b570      	push	{r4, r5, r6, lr}
 5da:	0004      	movs	r4, r0
 5dc:	000d      	movs	r5, r1
	ASSERT(descr && io);
 5de:	2800      	cmp	r0, #0
 5e0:	d00a      	beq.n	5f8 <usart_async_get_io_descriptor+0x20>
 5e2:	0008      	movs	r0, r1
 5e4:	1e43      	subs	r3, r0, #1
 5e6:	4198      	sbcs	r0, r3
 5e8:	b2c0      	uxtb	r0, r0
 5ea:	2277      	movs	r2, #119	; 0x77
 5ec:	4903      	ldr	r1, [pc, #12]	; (5fc <usart_async_get_io_descriptor+0x24>)
 5ee:	4b04      	ldr	r3, [pc, #16]	; (600 <usart_async_get_io_descriptor+0x28>)
 5f0:	4798      	blx	r3
	*io = &descr->io;
 5f2:	602c      	str	r4, [r5, #0]
}
 5f4:	2000      	movs	r0, #0
 5f6:	bd70      	pop	{r4, r5, r6, pc}
 5f8:	2000      	movs	r0, #0
 5fa:	e7f6      	b.n	5ea <usart_async_get_io_descriptor+0x12>
 5fc:	00000bdc 	.word	0x00000bdc
 600:	0000067d 	.word	0x0000067d

00000604 <usart_async_register_callback>:
{
 604:	b570      	push	{r4, r5, r6, lr}
 606:	0005      	movs	r5, r0
 608:	000e      	movs	r6, r1
 60a:	0014      	movs	r4, r2
	ASSERT(descr);
 60c:	1e43      	subs	r3, r0, #1
 60e:	4198      	sbcs	r0, r3
 610:	b2c0      	uxtb	r0, r0
 612:	2283      	movs	r2, #131	; 0x83
 614:	4916      	ldr	r1, [pc, #88]	; (670 <usart_async_register_callback+0x6c>)
 616:	4b17      	ldr	r3, [pc, #92]	; (674 <usart_async_register_callback+0x70>)
 618:	4798      	blx	r3
	switch (type) {
 61a:	2e01      	cmp	r6, #1
 61c:	d011      	beq.n	642 <usart_async_register_callback+0x3e>
 61e:	2e00      	cmp	r6, #0
 620:	d004      	beq.n	62c <usart_async_register_callback+0x28>
 622:	2e02      	cmp	r6, #2
 624:	d018      	beq.n	658 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
 626:	200d      	movs	r0, #13
 628:	4240      	negs	r0, r0
 62a:	e009      	b.n	640 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
 62c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
 62e:	1e62      	subs	r2, r4, #1
 630:	4194      	sbcs	r4, r2
 632:	b2e2      	uxtb	r2, r4
 634:	0028      	movs	r0, r5
 636:	3008      	adds	r0, #8
 638:	2101      	movs	r1, #1
 63a:	4b0f      	ldr	r3, [pc, #60]	; (678 <usart_async_register_callback+0x74>)
 63c:	4798      	blx	r3
	return ERR_NONE;
 63e:	2000      	movs	r0, #0
}
 640:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
 642:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
 644:	1e62      	subs	r2, r4, #1
 646:	4194      	sbcs	r4, r2
 648:	b2e2      	uxtb	r2, r4
 64a:	0028      	movs	r0, r5
 64c:	3008      	adds	r0, #8
 64e:	2102      	movs	r1, #2
 650:	4b09      	ldr	r3, [pc, #36]	; (678 <usart_async_register_callback+0x74>)
 652:	4798      	blx	r3
	return ERR_NONE;
 654:	2000      	movs	r0, #0
		break;
 656:	e7f3      	b.n	640 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
 658:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
 65a:	1e62      	subs	r2, r4, #1
 65c:	4194      	sbcs	r4, r2
 65e:	b2e2      	uxtb	r2, r4
 660:	0028      	movs	r0, r5
 662:	3008      	adds	r0, #8
 664:	2103      	movs	r1, #3
 666:	4b04      	ldr	r3, [pc, #16]	; (678 <usart_async_register_callback+0x74>)
 668:	4798      	blx	r3
	return ERR_NONE;
 66a:	2000      	movs	r0, #0
		break;
 66c:	e7e8      	b.n	640 <usart_async_register_callback+0x3c>
 66e:	46c0      	nop			; (mov r8, r8)
 670:	00000bdc 	.word	0x00000bdc
 674:	0000067d 	.word	0x0000067d
 678:	00000a15 	.word	0x00000a15

0000067c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 67c:	2800      	cmp	r0, #0
 67e:	d100      	bne.n	682 <assert+0x6>
		__asm("BKPT #0");
 680:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 682:	4770      	bx	lr

00000684 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
 684:	b570      	push	{r4, r5, r6, lr}
 686:	0004      	movs	r4, r0
 688:	000e      	movs	r6, r1
 68a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
 68c:	2800      	cmp	r0, #0
 68e:	d00b      	beq.n	6a8 <ringbuffer_init+0x24>
 690:	2900      	cmp	r1, #0
 692:	d018      	beq.n	6c6 <ringbuffer_init+0x42>
 694:	2001      	movs	r0, #1
 696:	2a00      	cmp	r2, #0
 698:	d107      	bne.n	6aa <ringbuffer_init+0x26>
 69a:	2228      	movs	r2, #40	; 0x28
 69c:	490c      	ldr	r1, [pc, #48]	; (6d0 <ringbuffer_init+0x4c>)
 69e:	2000      	movs	r0, #0
 6a0:	4b0c      	ldr	r3, [pc, #48]	; (6d4 <ringbuffer_init+0x50>)
 6a2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
 6a4:	1e6b      	subs	r3, r5, #1
 6a6:	e007      	b.n	6b8 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
 6a8:	2000      	movs	r0, #0
 6aa:	2228      	movs	r2, #40	; 0x28
 6ac:	4908      	ldr	r1, [pc, #32]	; (6d0 <ringbuffer_init+0x4c>)
 6ae:	4b09      	ldr	r3, [pc, #36]	; (6d4 <ringbuffer_init+0x50>)
 6b0:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
 6b2:	1e6b      	subs	r3, r5, #1
 6b4:	422b      	tst	r3, r5
 6b6:	d108      	bne.n	6ca <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
 6b8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
 6ba:	2300      	movs	r3, #0
 6bc:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
 6be:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
 6c0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
 6c2:	2000      	movs	r0, #0
}
 6c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
 6c6:	2000      	movs	r0, #0
 6c8:	e7ef      	b.n	6aa <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
 6ca:	200d      	movs	r0, #13
 6cc:	4240      	negs	r0, r0
 6ce:	e7f9      	b.n	6c4 <ringbuffer_init+0x40>
 6d0:	00000bfc 	.word	0x00000bfc
 6d4:	0000067d 	.word	0x0000067d

000006d8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
 6d8:	b570      	push	{r4, r5, r6, lr}
 6da:	0004      	movs	r4, r0
 6dc:	000d      	movs	r5, r1
	ASSERT(rb && data);
 6de:	2800      	cmp	r0, #0
 6e0:	d015      	beq.n	70e <ringbuffer_get+0x36>
 6e2:	0008      	movs	r0, r1
 6e4:	1e43      	subs	r3, r0, #1
 6e6:	4198      	sbcs	r0, r3
 6e8:	b2c0      	uxtb	r0, r0
 6ea:	2240      	movs	r2, #64	; 0x40
 6ec:	490a      	ldr	r1, [pc, #40]	; (718 <ringbuffer_get+0x40>)
 6ee:	4b0b      	ldr	r3, [pc, #44]	; (71c <ringbuffer_get+0x44>)
 6f0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
 6f2:	68a3      	ldr	r3, [r4, #8]
 6f4:	68e2      	ldr	r2, [r4, #12]
 6f6:	429a      	cmp	r2, r3
 6f8:	d00b      	beq.n	712 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
 6fa:	6862      	ldr	r2, [r4, #4]
 6fc:	4013      	ands	r3, r2
 6fe:	6822      	ldr	r2, [r4, #0]
 700:	5cd3      	ldrb	r3, [r2, r3]
 702:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
 704:	68a3      	ldr	r3, [r4, #8]
 706:	3301      	adds	r3, #1
 708:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
 70a:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
 70c:	bd70      	pop	{r4, r5, r6, pc}
 70e:	2000      	movs	r0, #0
 710:	e7eb      	b.n	6ea <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
 712:	200a      	movs	r0, #10
 714:	4240      	negs	r0, r0
 716:	e7f9      	b.n	70c <ringbuffer_get+0x34>
 718:	00000bfc 	.word	0x00000bfc
 71c:	0000067d 	.word	0x0000067d

00000720 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
 720:	b570      	push	{r4, r5, r6, lr}
 722:	0004      	movs	r4, r0
 724:	000d      	movs	r5, r1
	ASSERT(rb);
 726:	1e43      	subs	r3, r0, #1
 728:	4198      	sbcs	r0, r3
 72a:	b2c0      	uxtb	r0, r0
 72c:	2251      	movs	r2, #81	; 0x51
 72e:	490a      	ldr	r1, [pc, #40]	; (758 <ringbuffer_put+0x38>)
 730:	4b0a      	ldr	r3, [pc, #40]	; (75c <ringbuffer_put+0x3c>)
 732:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
 734:	6863      	ldr	r3, [r4, #4]
 736:	68e2      	ldr	r2, [r4, #12]
 738:	4013      	ands	r3, r2
 73a:	6822      	ldr	r2, [r4, #0]
 73c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
 73e:	68e3      	ldr	r3, [r4, #12]
 740:	6861      	ldr	r1, [r4, #4]
 742:	68a2      	ldr	r2, [r4, #8]
 744:	1a9a      	subs	r2, r3, r2
 746:	428a      	cmp	r2, r1
 748:	d901      	bls.n	74e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
 74a:	1a59      	subs	r1, r3, r1
 74c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
 74e:	3301      	adds	r3, #1
 750:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
 752:	2000      	movs	r0, #0
 754:	bd70      	pop	{r4, r5, r6, pc}
 756:	46c0      	nop			; (mov r8, r8)
 758:	00000bfc 	.word	0x00000bfc
 75c:	0000067d 	.word	0x0000067d

00000760 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
 760:	b510      	push	{r4, lr}
 762:	0004      	movs	r4, r0
	ASSERT(rb);
 764:	1e43      	subs	r3, r0, #1
 766:	4198      	sbcs	r0, r3
 768:	b2c0      	uxtb	r0, r0
 76a:	2267      	movs	r2, #103	; 0x67
 76c:	4903      	ldr	r1, [pc, #12]	; (77c <ringbuffer_num+0x1c>)
 76e:	4b04      	ldr	r3, [pc, #16]	; (780 <ringbuffer_num+0x20>)
 770:	4798      	blx	r3

	return rb->write_index - rb->read_index;
 772:	68e0      	ldr	r0, [r4, #12]
 774:	68a3      	ldr	r3, [r4, #8]
 776:	1ac0      	subs	r0, r0, r3
}
 778:	bd10      	pop	{r4, pc}
 77a:	46c0      	nop			; (mov r8, r8)
 77c:	00000bfc 	.word	0x00000bfc
 780:	0000067d 	.word	0x0000067d

00000784 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
 784:	23fa      	movs	r3, #250	; 0xfa
 786:	011b      	lsls	r3, r3, #4
 788:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 78a:	4770      	bx	lr

0000078c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 78c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 78e:	4b08      	ldr	r3, [pc, #32]	; (7b0 <_init_chip+0x24>)
 790:	685a      	ldr	r2, [r3, #4]
 792:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
 794:	4b07      	ldr	r3, [pc, #28]	; (7b4 <_init_chip+0x28>)
 796:	4798      	blx	r3
	_oscctrl_init_sources();
 798:	4b07      	ldr	r3, [pc, #28]	; (7b8 <_init_chip+0x2c>)
 79a:	4798      	blx	r3
	_mclk_init();
 79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <_init_chip+0x30>)
 79e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 7a0:	4b07      	ldr	r3, [pc, #28]	; (7c0 <_init_chip+0x34>)
 7a2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 7a4:	20ff      	movs	r0, #255	; 0xff
 7a6:	4b07      	ldr	r3, [pc, #28]	; (7c4 <_init_chip+0x38>)
 7a8:	4798      	blx	r3

	_div_init();
 7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <_init_chip+0x3c>)
 7ac:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 7ae:	bd10      	pop	{r4, pc}
 7b0:	41004000 	.word	0x41004000
 7b4:	0000080d 	.word	0x0000080d
 7b8:	00000825 	.word	0x00000825
 7bc:	00000801 	.word	0x00000801
 7c0:	00000865 	.word	0x00000865
 7c4:	000007dd 	.word	0x000007dd
 7c8:	000007cd 	.word	0x000007cd

000007cc <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
 7cc:	2290      	movs	r2, #144	; 0x90
 7ce:	05d2      	lsls	r2, r2, #23
 7d0:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
 7d2:	2102      	movs	r1, #2
 7d4:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
 7d6:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
 7d8:	4770      	bx	lr
	...

000007dc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 7dc:	07c3      	lsls	r3, r0, #31
 7de:	d507      	bpl.n	7f0 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 7e0:	4a04      	ldr	r2, [pc, #16]	; (7f4 <_gclk_init_generators_by_fref+0x18>)
 7e2:	4b05      	ldr	r3, [pc, #20]	; (7f8 <_gclk_init_generators_by_fref+0x1c>)
 7e4:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 7e6:	0019      	movs	r1, r3
 7e8:	4a04      	ldr	r2, [pc, #16]	; (7fc <_gclk_init_generators_by_fref+0x20>)
 7ea:	684b      	ldr	r3, [r1, #4]
 7ec:	4213      	tst	r3, r2
 7ee:	d1fc      	bne.n	7ea <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 7f0:	4770      	bx	lr
 7f2:	46c0      	nop			; (mov r8, r8)
 7f4:	00010106 	.word	0x00010106
 7f8:	40001c00 	.word	0x40001c00
 7fc:	000007fd 	.word	0x000007fd

00000800 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
 800:	2201      	movs	r2, #1
 802:	4b01      	ldr	r3, [pc, #4]	; (808 <_mclk_init+0x8>)
 804:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 806:	4770      	bx	lr
 808:	40000800 	.word	0x40000800

0000080c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 80c:	4b04      	ldr	r3, [pc, #16]	; (820 <_osc32kctrl_init_sources+0x14>)
 80e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 810:	21f8      	movs	r1, #248	; 0xf8
 812:	0149      	lsls	r1, r1, #5
 814:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 816:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 818:	2201      	movs	r2, #1
 81a:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 81c:	4770      	bx	lr
 81e:	46c0      	nop			; (mov r8, r8)
 820:	40001400 	.word	0x40001400

00000824 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
 824:	4b0e      	ldr	r3, [pc, #56]	; (860 <_oscctrl_init_sources+0x3c>)
 826:	2202      	movs	r2, #2
 828:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
 82a:	3209      	adds	r2, #9
 82c:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
 82e:	0019      	movs	r1, r3
 830:	3a07      	subs	r2, #7
 832:	698b      	ldr	r3, [r1, #24]
 834:	421a      	tst	r2, r3
 836:	d1fc      	bne.n	832 <_oscctrl_init_sources+0xe>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
 838:	4909      	ldr	r1, [pc, #36]	; (860 <_oscctrl_init_sources+0x3c>)
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
 83a:	2204      	movs	r2, #4
 83c:	698b      	ldr	r3, [r1, #24]
 83e:	421a      	tst	r2, r3
 840:	d1fc      	bne.n	83c <_oscctrl_init_sources+0x18>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
 842:	2207      	movs	r2, #7
 844:	4b06      	ldr	r3, [pc, #24]	; (860 <_oscctrl_init_sources+0x3c>)
 846:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
 848:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
 84a:	3209      	adds	r2, #9
 84c:	68cb      	ldr	r3, [r1, #12]
 84e:	421a      	tst	r2, r3
 850:	d0fc      	beq.n	84c <_oscctrl_init_sources+0x28>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
 852:	4a03      	ldr	r2, [pc, #12]	; (860 <_oscctrl_init_sources+0x3c>)
 854:	7d13      	ldrb	r3, [r2, #20]
 856:	2180      	movs	r1, #128	; 0x80
 858:	430b      	orrs	r3, r1
 85a:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 85c:	4770      	bx	lr
 85e:	46c0      	nop			; (mov r8, r8)
 860:	40001000 	.word	0x40001000

00000864 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 864:	4770      	bx	lr
	...

00000868 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
 868:	b530      	push	{r4, r5, lr}
 86a:	b089      	sub	sp, #36	; 0x24
	Sercom *const sercom_modules[] = SERCOM_INSTS;
 86c:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <_sercom_get_hardware_index+0x38>)
 86e:	466a      	mov	r2, sp
 870:	cb32      	ldmia	r3!, {r1, r4, r5}
 872:	c232      	stmia	r2!, {r1, r4, r5}
 874:	cb32      	ldmia	r3!, {r1, r4, r5}
 876:	c232      	stmia	r2!, {r1, r4, r5}
 878:	cb12      	ldmia	r3!, {r1, r4}
 87a:	c212      	stmia	r2!, {r1, r4}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
 87c:	9b00      	ldr	r3, [sp, #0]
 87e:	4283      	cmp	r3, r0
 880:	d00b      	beq.n	89a <_sercom_get_hardware_index+0x32>
 882:	2301      	movs	r3, #1
 884:	009a      	lsls	r2, r3, #2
 886:	4669      	mov	r1, sp
 888:	5852      	ldr	r2, [r2, r1]
 88a:	4282      	cmp	r2, r0
 88c:	d006      	beq.n	89c <_sercom_get_hardware_index+0x34>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
 88e:	3301      	adds	r3, #1
 890:	2b08      	cmp	r3, #8
 892:	d1f7      	bne.n	884 <_sercom_get_hardware_index+0x1c>
			return i;
		}
	}
	return 0;
 894:	2000      	movs	r0, #0
}
 896:	b009      	add	sp, #36	; 0x24
 898:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
 89a:	2300      	movs	r3, #0
			return i;
 89c:	b2d8      	uxtb	r0, r3
 89e:	e7fa      	b.n	896 <_sercom_get_hardware_index+0x2e>
 8a0:	00000c20 	.word	0x00000c20

000008a4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
 8a4:	b510      	push	{r4, lr}
	if (SERCOM6 == hw || SERCOM7 == hw) {
 8a6:	2386      	movs	r3, #134	; 0x86
 8a8:	05db      	lsls	r3, r3, #23
 8aa:	4298      	cmp	r0, r3
 8ac:	d007      	beq.n	8be <_sercom_get_irq_num+0x1a>
 8ae:	4b08      	ldr	r3, [pc, #32]	; (8d0 <_sercom_get_irq_num+0x2c>)
 8b0:	4298      	cmp	r0, r3
 8b2:	d004      	beq.n	8be <_sercom_get_irq_num+0x1a>
		return SERCOM6_IRQn + (((uint32_t)hw - (uint32_t)SERCOM6) >> 10);
	} else {
		return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
 8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <_sercom_get_irq_num+0x30>)
 8b6:	4798      	blx	r3
 8b8:	3009      	adds	r0, #9
 8ba:	b2c0      	uxtb	r0, r0
	}
}
 8bc:	bd10      	pop	{r4, pc}
		return SERCOM6_IRQn + (((uint32_t)hw - (uint32_t)SERCOM6) >> 10);
 8be:	23bd      	movs	r3, #189	; 0xbd
 8c0:	061b      	lsls	r3, r3, #24
 8c2:	469c      	mov	ip, r3
 8c4:	4460      	add	r0, ip
 8c6:	0a80      	lsrs	r0, r0, #10
 8c8:	3009      	adds	r0, #9
 8ca:	b2c0      	uxtb	r0, r0
 8cc:	e7f6      	b.n	8bc <_sercom_get_irq_num+0x18>
 8ce:	46c0      	nop			; (mov r8, r8)
 8d0:	43000400 	.word	0x43000400
 8d4:	00000869 	.word	0x00000869

000008d8 <_usart_init>:
{
 8d8:	b510      	push	{r4, lr}
 8da:	0004      	movs	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
 8dc:	4b1e      	ldr	r3, [pc, #120]	; (958 <_usart_init+0x80>)
 8de:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
 8e0:	2804      	cmp	r0, #4
 8e2:	d004      	beq.n	8ee <_usart_init+0x16>
	ASSERT(false);
 8e4:	4a1d      	ldr	r2, [pc, #116]	; (95c <_usart_init+0x84>)
 8e6:	491e      	ldr	r1, [pc, #120]	; (960 <_usart_init+0x88>)
 8e8:	2000      	movs	r0, #0
 8ea:	4b1e      	ldr	r3, [pc, #120]	; (964 <_usart_init+0x8c>)
 8ec:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
 8ee:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
 8f0:	07db      	lsls	r3, r3, #31
 8f2:	d418      	bmi.n	926 <_usart_init+0x4e>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 8f4:	2203      	movs	r2, #3
 8f6:	69e3      	ldr	r3, [r4, #28]
 8f8:	421a      	tst	r2, r3
 8fa:	d1fc      	bne.n	8f6 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
 8fc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
 8fe:	079b      	lsls	r3, r3, #30
 900:	d50b      	bpl.n	91a <_usart_init+0x42>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
 902:	6823      	ldr	r3, [r4, #0]
 904:	2202      	movs	r2, #2
 906:	4393      	bics	r3, r2
 908:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 90a:	3201      	adds	r2, #1
 90c:	69e3      	ldr	r3, [r4, #28]
 90e:	421a      	tst	r2, r3
 910:	d1fc      	bne.n	90c <_usart_init+0x34>
 912:	2202      	movs	r2, #2
 914:	69e3      	ldr	r3, [r4, #28]
 916:	421a      	tst	r2, r3
 918:	d1fc      	bne.n	914 <_usart_init+0x3c>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
 91a:	2305      	movs	r3, #5
 91c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 91e:	2203      	movs	r2, #3
 920:	69e3      	ldr	r3, [r4, #28]
 922:	421a      	tst	r2, r3
 924:	d1fc      	bne.n	920 <_usart_init+0x48>
 926:	2201      	movs	r2, #1
 928:	69e3      	ldr	r3, [r4, #28]
 92a:	421a      	tst	r2, r3
 92c:	d1fc      	bne.n	928 <_usart_init+0x50>
	((Sercom *)hw)->USART.CTRLA.reg = data;
 92e:	4b0e      	ldr	r3, [pc, #56]	; (968 <_usart_init+0x90>)
 930:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 932:	2203      	movs	r2, #3
 934:	69e3      	ldr	r3, [r4, #28]
 936:	421a      	tst	r2, r3
 938:	d1fc      	bne.n	934 <_usart_init+0x5c>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
 93a:	23c0      	movs	r3, #192	; 0xc0
 93c:	029b      	lsls	r3, r3, #10
 93e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 940:	2207      	movs	r2, #7
 942:	69e3      	ldr	r3, [r4, #28]
 944:	421a      	tst	r2, r3
 946:	d1fc      	bne.n	942 <_usart_init+0x6a>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
 948:	4b08      	ldr	r3, [pc, #32]	; (96c <_usart_init+0x94>)
 94a:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
 94c:	2300      	movs	r3, #0
 94e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
 950:	2230      	movs	r2, #48	; 0x30
 952:	54a3      	strb	r3, [r4, r2]
}
 954:	2000      	movs	r0, #0
 956:	bd10      	pop	{r4, pc}
 958:	00000869 	.word	0x00000869
 95c:	00000261 	.word	0x00000261
 960:	00000c58 	.word	0x00000c58
 964:	0000067d 	.word	0x0000067d
 968:	40310004 	.word	0x40310004
 96c:	fffff62b 	.word	0xfffff62b

00000970 <_usart_async_init>:
{
 970:	b570      	push	{r4, r5, r6, lr}
 972:	0006      	movs	r6, r0
 974:	000c      	movs	r4, r1
	ASSERT(device);
 976:	1e43      	subs	r3, r0, #1
 978:	4198      	sbcs	r0, r3
 97a:	b2c0      	uxtb	r0, r0
 97c:	22c4      	movs	r2, #196	; 0xc4
 97e:	4913      	ldr	r1, [pc, #76]	; (9cc <_usart_async_init+0x5c>)
 980:	4b13      	ldr	r3, [pc, #76]	; (9d0 <_usart_async_init+0x60>)
 982:	4798      	blx	r3
	init_status = _usart_init(hw);
 984:	0020      	movs	r0, r4
 986:	4b13      	ldr	r3, [pc, #76]	; (9d4 <_usart_async_init+0x64>)
 988:	4798      	blx	r3
 98a:	1e05      	subs	r5, r0, #0
	if (init_status) {
 98c:	d001      	beq.n	992 <_usart_async_init+0x22>
}
 98e:	0028      	movs	r0, r5
 990:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
 992:	61b4      	str	r4, [r6, #24]
	if (hw == SERCOM4) {
 994:	4b10      	ldr	r3, [pc, #64]	; (9d8 <_usart_async_init+0x68>)
 996:	429c      	cmp	r4, r3
 998:	d014      	beq.n	9c4 <_usart_async_init+0x54>
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
 99a:	0020      	movs	r0, r4
 99c:	4b0f      	ldr	r3, [pc, #60]	; (9dc <_usart_async_init+0x6c>)
 99e:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 9a0:	0603      	lsls	r3, r0, #24
 9a2:	d4f4      	bmi.n	98e <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 9a4:	231f      	movs	r3, #31
 9a6:	4018      	ands	r0, r3
 9a8:	3b1e      	subs	r3, #30
 9aa:	4083      	lsls	r3, r0
 9ac:	4a0c      	ldr	r2, [pc, #48]	; (9e0 <_usart_async_init+0x70>)
 9ae:	2180      	movs	r1, #128	; 0x80
 9b0:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
 9b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 9b6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 9ba:	3101      	adds	r1, #1
 9bc:	31ff      	adds	r1, #255	; 0xff
 9be:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 9c0:	6013      	str	r3, [r2, #0]
 9c2:	e7e4      	b.n	98e <_usart_async_init+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
 9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <_usart_async_init+0x74>)
 9c6:	601e      	str	r6, [r3, #0]
 9c8:	e7e7      	b.n	99a <_usart_async_init+0x2a>
 9ca:	46c0      	nop			; (mov r8, r8)
 9cc:	00000c58 	.word	0x00000c58
 9d0:	0000067d 	.word	0x0000067d
 9d4:	000008d9 	.word	0x000008d9
 9d8:	42001400 	.word	0x42001400
 9dc:	000008a5 	.word	0x000008a5
 9e0:	e000e100 	.word	0xe000e100
 9e4:	2000003c 	.word	0x2000003c

000009e8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
 9e8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 9ea:	6813      	ldr	r3, [r2, #0]
 9ec:	2102      	movs	r1, #2
 9ee:	430b      	orrs	r3, r1
 9f0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 9f2:	3101      	adds	r1, #1
 9f4:	69d3      	ldr	r3, [r2, #28]
 9f6:	4219      	tst	r1, r3
 9f8:	d1fc      	bne.n	9f4 <_usart_async_enable+0xc>
}
 9fa:	4770      	bx	lr

000009fc <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
 9fc:	6983      	ldr	r3, [r0, #24]
 9fe:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
 a00:	8519      	strh	r1, [r3, #40]	; 0x28
}
 a02:	4770      	bx	lr

00000a04 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
 a04:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
 a06:	2201      	movs	r2, #1
 a08:	759a      	strb	r2, [r3, #22]
}
 a0a:	4770      	bx	lr

00000a0c <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
 a0c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
 a0e:	2202      	movs	r2, #2
 a10:	759a      	strb	r2, [r3, #22]
}
 a12:	4770      	bx	lr

00000a14 <_usart_async_set_irq_state>:
{
 a14:	b570      	push	{r4, r5, r6, lr}
 a16:	0004      	movs	r4, r0
 a18:	000d      	movs	r5, r1
 a1a:	0016      	movs	r6, r2
	ASSERT(device);
 a1c:	1e43      	subs	r3, r0, #1
 a1e:	4198      	sbcs	r0, r3
 a20:	b2c0      	uxtb	r0, r0
 a22:	4a16      	ldr	r2, [pc, #88]	; (a7c <_usart_async_set_irq_state+0x68>)
 a24:	4916      	ldr	r1, [pc, #88]	; (a80 <_usart_async_set_irq_state+0x6c>)
 a26:	4b17      	ldr	r3, [pc, #92]	; (a84 <_usart_async_set_irq_state+0x70>)
 a28:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
 a2a:	2302      	movs	r3, #2
 a2c:	002a      	movs	r2, r5
 a2e:	439a      	bics	r2, r3
 a30:	d10e      	bne.n	a50 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
 a32:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 a34:	2e00      	cmp	r6, #0
 a36:	d105      	bne.n	a44 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
 a38:	2201      	movs	r2, #1
 a3a:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
 a3c:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
 a3e:	3201      	adds	r2, #1
 a40:	751a      	strb	r2, [r3, #20]
}
 a42:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
 a44:	2201      	movs	r2, #1
 a46:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
 a48:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
 a4a:	3201      	adds	r2, #1
 a4c:	759a      	strb	r2, [r3, #22]
 a4e:	e7f8      	b.n	a42 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
 a50:	2d01      	cmp	r5, #1
 a52:	d007      	beq.n	a64 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
 a54:	2d03      	cmp	r5, #3
 a56:	d1f4      	bne.n	a42 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
 a58:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 a5a:	2e00      	cmp	r6, #0
 a5c:	d00b      	beq.n	a76 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
 a5e:	2280      	movs	r2, #128	; 0x80
 a60:	759a      	strb	r2, [r3, #22]
}
 a62:	e7ee      	b.n	a42 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
 a64:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 a66:	2e00      	cmp	r6, #0
 a68:	d102      	bne.n	a70 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
 a6a:	2204      	movs	r2, #4
 a6c:	751a      	strb	r2, [r3, #20]
 a6e:	e7e8      	b.n	a42 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
 a70:	2204      	movs	r2, #4
 a72:	759a      	strb	r2, [r3, #22]
 a74:	e7e5      	b.n	a42 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
 a76:	2280      	movs	r2, #128	; 0x80
 a78:	751a      	strb	r2, [r3, #20]
 a7a:	e7e2      	b.n	a42 <_usart_async_set_irq_state+0x2e>
 a7c:	00000221 	.word	0x00000221
 a80:	00000c58 	.word	0x00000c58
 a84:	0000067d 	.word	0x0000067d

00000a88 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
 a88:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
 a8a:	4b19      	ldr	r3, [pc, #100]	; (af0 <SERCOM4_Handler+0x68>)
 a8c:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
 a8e:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
 a90:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
 a92:	07db      	lsls	r3, r3, #31
 a94:	d502      	bpl.n	a9c <SERCOM4_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
 a96:	7da3      	ldrb	r3, [r4, #22]
 a98:	07db      	lsls	r3, r3, #31
 a9a:	d40f      	bmi.n	abc <SERCOM4_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
 a9c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
 a9e:	079b      	lsls	r3, r3, #30
 aa0:	d502      	bpl.n	aa8 <SERCOM4_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
 aa2:	7da3      	ldrb	r3, [r4, #22]
 aa4:	079b      	lsls	r3, r3, #30
 aa6:	d40e      	bmi.n	ac6 <SERCOM4_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
 aa8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
 aaa:	075b      	lsls	r3, r3, #29
 aac:	d515      	bpl.n	ada <SERCOM4_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
 aae:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
 ab0:	2337      	movs	r3, #55	; 0x37
 ab2:	421a      	tst	r2, r3
 ab4:	d00c      	beq.n	ad0 <SERCOM4_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
 ab6:	3348      	adds	r3, #72	; 0x48
 ab8:	8363      	strh	r3, [r4, #26]
}
 aba:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
 abc:	2301      	movs	r3, #1
 abe:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
 ac0:	6803      	ldr	r3, [r0, #0]
 ac2:	4798      	blx	r3
 ac4:	e7f9      	b.n	aba <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
 ac6:	2302      	movs	r3, #2
 ac8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
 aca:	6883      	ldr	r3, [r0, #8]
 acc:	4798      	blx	r3
 ace:	e7f4      	b.n	aba <SERCOM4_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
 ad0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
 ad2:	b2c9      	uxtb	r1, r1
 ad4:	6843      	ldr	r3, [r0, #4]
 ad6:	4798      	blx	r3
 ad8:	e7ef      	b.n	aba <SERCOM4_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
 ada:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
 adc:	09db      	lsrs	r3, r3, #7
 ade:	d0ec      	beq.n	aba <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
 ae0:	2380      	movs	r3, #128	; 0x80
 ae2:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
 ae4:	68c3      	ldr	r3, [r0, #12]
 ae6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
 ae8:	8b63      	ldrh	r3, [r4, #26]
 aea:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
 aec:	8363      	strh	r3, [r4, #26]
}
 aee:	e7e4      	b.n	aba <SERCOM4_Handler+0x32>
 af0:	2000003c 	.word	0x2000003c

00000af4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 af4:	4b02      	ldr	r3, [pc, #8]	; (b00 <_delay_init+0xc>)
 af6:	4a03      	ldr	r2, [pc, #12]	; (b04 <_delay_init+0x10>)
 af8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 afa:	2205      	movs	r2, #5
 afc:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 afe:	4770      	bx	lr
 b00:	e000e010 	.word	0xe000e010
 b04:	00ffffff 	.word	0x00ffffff

00000b08 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
 b08:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
 b0a:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 b0c:	1e5e      	subs	r6, r3, #1
 b0e:	b2f6      	uxtb	r6, r6
 b10:	2b00      	cmp	r3, #0
 b12:	d013      	beq.n	b3c <_delay_cycles+0x34>
 b14:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
 b16:	4a0e      	ldr	r2, [pc, #56]	; (b50 <_delay_cycles+0x48>)
 b18:	4d0e      	ldr	r5, [pc, #56]	; (b54 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 b1a:	2080      	movs	r0, #128	; 0x80
 b1c:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
 b1e:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
 b20:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 b22:	6813      	ldr	r3, [r2, #0]
 b24:	4203      	tst	r3, r0
 b26:	d0fc      	beq.n	b22 <_delay_cycles+0x1a>
	while (n--) {
 b28:	3c01      	subs	r4, #1
 b2a:	b2e4      	uxtb	r4, r4
 b2c:	2cff      	cmp	r4, #255	; 0xff
 b2e:	d1f6      	bne.n	b1e <_delay_cycles+0x16>
 b30:	0633      	lsls	r3, r6, #24
 b32:	1af6      	subs	r6, r6, r3
 b34:	4b08      	ldr	r3, [pc, #32]	; (b58 <_delay_cycles+0x50>)
 b36:	469c      	mov	ip, r3
 b38:	4461      	add	r1, ip
 b3a:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
 b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <_delay_cycles+0x48>)
 b3e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 b40:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 b42:	0019      	movs	r1, r3
 b44:	2280      	movs	r2, #128	; 0x80
 b46:	0252      	lsls	r2, r2, #9
 b48:	680b      	ldr	r3, [r1, #0]
 b4a:	4213      	tst	r3, r2
 b4c:	d0fc      	beq.n	b48 <_delay_cycles+0x40>
		;
}
 b4e:	bd70      	pop	{r4, r5, r6, pc}
 b50:	e000e010 	.word	0xe000e010
 b54:	00ffffff 	.word	0x00ffffff
 b58:	ff000001 	.word	0xff000001

00000b5c <main>:
#include <atmel_start.h>
#include <driver_examples.h>

int main(void)
{
 b5c:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 b5e:	4b05      	ldr	r3, [pc, #20]	; (b74 <main+0x18>)
 b60:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
	USART_On_USBPort_example();
 b62:	4e05      	ldr	r6, [pc, #20]	; (b78 <main+0x1c>)
	delay_ms(1000);
 b64:	25fa      	movs	r5, #250	; 0xfa
 b66:	00ad      	lsls	r5, r5, #2
 b68:	4c04      	ldr	r4, [pc, #16]	; (b7c <main+0x20>)
	USART_On_USBPort_example();
 b6a:	47b0      	blx	r6
	delay_ms(1000);
 b6c:	0028      	movs	r0, r5
 b6e:	47a0      	blx	r4
 b70:	e7fb      	b.n	b6a <main+0xe>
 b72:	46c0      	nop			; (mov r8, r8)
 b74:	0000011d 	.word	0x0000011d
 b78:	00000285 	.word	0x00000285
 b7c:	000002fd 	.word	0x000002fd

00000b80 <__libc_init_array>:
 b80:	b570      	push	{r4, r5, r6, lr}
 b82:	2600      	movs	r6, #0
 b84:	4d0c      	ldr	r5, [pc, #48]	; (bb8 <__libc_init_array+0x38>)
 b86:	4c0d      	ldr	r4, [pc, #52]	; (bbc <__libc_init_array+0x3c>)
 b88:	1b64      	subs	r4, r4, r5
 b8a:	10a4      	asrs	r4, r4, #2
 b8c:	42a6      	cmp	r6, r4
 b8e:	d109      	bne.n	ba4 <__libc_init_array+0x24>
 b90:	2600      	movs	r6, #0
 b92:	f000 f86f 	bl	c74 <_init>
 b96:	4d0a      	ldr	r5, [pc, #40]	; (bc0 <__libc_init_array+0x40>)
 b98:	4c0a      	ldr	r4, [pc, #40]	; (bc4 <__libc_init_array+0x44>)
 b9a:	1b64      	subs	r4, r4, r5
 b9c:	10a4      	asrs	r4, r4, #2
 b9e:	42a6      	cmp	r6, r4
 ba0:	d105      	bne.n	bae <__libc_init_array+0x2e>
 ba2:	bd70      	pop	{r4, r5, r6, pc}
 ba4:	00b3      	lsls	r3, r6, #2
 ba6:	58eb      	ldr	r3, [r5, r3]
 ba8:	4798      	blx	r3
 baa:	3601      	adds	r6, #1
 bac:	e7ee      	b.n	b8c <__libc_init_array+0xc>
 bae:	00b3      	lsls	r3, r6, #2
 bb0:	58eb      	ldr	r3, [r5, r3]
 bb2:	4798      	blx	r3
 bb4:	3601      	adds	r6, #1
 bb6:	e7f2      	b.n	b9e <__libc_init_array+0x1e>
 bb8:	00000c80 	.word	0x00000c80
 bbc:	00000c80 	.word	0x00000c80
 bc0:	00000c80 	.word	0x00000c80
 bc4:	00000c84 	.word	0x00000c84
 bc8:	682f2e2e 	.word	0x682f2e2e
 bcc:	732f6c61 	.word	0x732f6c61
 bd0:	682f6372 	.word	0x682f6372
 bd4:	695f6c61 	.word	0x695f6c61
 bd8:	00632e6f 	.word	0x00632e6f
 bdc:	682f2e2e 	.word	0x682f2e2e
 be0:	732f6c61 	.word	0x732f6c61
 be4:	682f6372 	.word	0x682f6372
 be8:	755f6c61 	.word	0x755f6c61
 bec:	74726173 	.word	0x74726173
 bf0:	7973615f 	.word	0x7973615f
 bf4:	632e636e 	.word	0x632e636e
 bf8:	00000000 	.word	0x00000000
 bfc:	682f2e2e 	.word	0x682f2e2e
 c00:	752f6c61 	.word	0x752f6c61
 c04:	736c6974 	.word	0x736c6974
 c08:	6372732f 	.word	0x6372732f
 c0c:	6974752f 	.word	0x6974752f
 c10:	725f736c 	.word	0x725f736c
 c14:	62676e69 	.word	0x62676e69
 c18:	65666675 	.word	0x65666675
 c1c:	00632e72 	.word	0x00632e72
 c20:	42000400 	.word	0x42000400
 c24:	42000800 	.word	0x42000800
 c28:	42000c00 	.word	0x42000c00
 c2c:	42001000 	.word	0x42001000
 c30:	42001400 	.word	0x42001400
 c34:	42001800 	.word	0x42001800
 c38:	43000000 	.word	0x43000000
 c3c:	43000400 	.word	0x43000400

00000c40 <_i2cms>:
	...
 c58:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
 c68:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00000c74 <_init>:
 c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c76:	46c0      	nop			; (mov r8, r8)
 c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c7a:	bc08      	pop	{r3}
 c7c:	469e      	mov	lr, r3
 c7e:	4770      	bx	lr

00000c80 <__init_array_start>:
 c80:	000000e5 	.word	0x000000e5

00000c84 <_fini>:
 c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c86:	46c0      	nop			; (mov r8, r8)
 c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c8a:	bc08      	pop	{r3}
 c8c:	469e      	mov	lr, r3
 c8e:	4770      	bx	lr

00000c90 <__fini_array_start>:
 c90:	000000bd 	.word	0x000000bd
